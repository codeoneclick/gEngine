// autogenerated: do not add any changes
#include "CMEConfigurationModelBrush.h"
i32 CMEConfigurationModelBrush::getZOrder(void) const
{
const auto& iterator = m_attributes.find("/model_brush/z_order");
assert(iterator != m_attributes.end());
i32 value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void CMEConfigurationModelBrush::setZOrder(i32 z_order)
{
IConfiguration::setAttribute("/model_brush/z_order", std::make_shared<CConfigurationAttribute>(z_order));
}
#endif
std::vector<std::shared_ptr<IConfiguration>> CMEConfigurationModelBrush::getElementsConfigurations(void) const
{
const auto& iterator = m_configurations.find("/model_brush/elements/element");
if(iterator == m_configurations.end())
{
return std::vector<std::shared_ptr<IConfiguration>>();
}
assert(iterator != m_configurations.end());
return iterator->second;
}
#if defined(__EDITOR__)
void CMEConfigurationModelBrush::addElementsConfigurations(const std::shared_ptr<CMEConfigurationBrushElement>& element)
{
IConfiguration::setConfiguration("/model_brush/elements/element", element);
}
#endif
#if defined(__EDITOR__)
void CMEConfigurationModelBrush::setElementsConfigurations(const std::shared_ptr<CMEConfigurationBrushElement>& element, i32 index)
{
IConfiguration::setConfiguration("/model_brush/elements/element", element, index);
}
#endif
std::vector<std::shared_ptr<IConfiguration>> CMEConfigurationModelBrush::getMaterialsConfigurations(void) const
{
const auto& iterator = m_configurations.find("/model_brush/materials/material");
if(iterator == m_configurations.end())
{
return std::vector<std::shared_ptr<IConfiguration>>();
}
assert(iterator != m_configurations.end());
return iterator->second;
}
#if defined(__EDITOR__)
void CMEConfigurationModelBrush::addMaterialsConfigurations(const std::shared_ptr<CConfigurationMaterial>& material)
{
IConfiguration::setConfiguration("/model_brush/materials/material", material);
}
#endif
#if defined(__EDITOR__)
void CMEConfigurationModelBrush::setMaterialsConfigurations(const std::shared_ptr<CConfigurationMaterial>& material, i32 index)
{
IConfiguration::setConfiguration("/model_brush/materials/material", material, index);
}
#endif
void CMEConfigurationModelBrush::serialize(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = IConfiguration::openXMLDocument(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/model_brush");
i32 z_order = node.node().attribute("z_order").as_int();
IConfiguration::setAttribute("/model_brush/z_order", std::make_shared<CConfigurationAttribute>(z_order));
pugi::xpath_node_set element_nodes = document.select_nodes("/model_brush/elements/element");
for (pugi::xpath_node_set::const_iterator iterator = element_nodes.begin(); iterator != element_nodes.end(); ++iterator)
{
std::shared_ptr<CMEConfigurationBrushElement> element = std::make_shared<CMEConfigurationBrushElement>();
pugi::xpath_node node = (*iterator);
element->serialize(document, node);
IConfiguration::setConfiguration("/model_brush/elements/element", element);
}
pugi::xpath_node_set material_nodes = document.select_nodes("/model_brush/materials/material");
for (pugi::xpath_node_set::const_iterator iterator = material_nodes.begin(); iterator != material_nodes.end(); ++iterator)
{
std::shared_ptr<CConfigurationMaterial> material = std::make_shared<CConfigurationMaterial>();
material->serialize((*iterator).node().attribute("filename").as_string());
IConfiguration::setConfiguration("/model_brush/materials/material", material);
}
}
#if defined(__EDITOR__)
void CMEConfigurationModelBrush::deserialize(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = document.load("");
assert(result.status == pugi::status_ok);
pugi::xml_node node = document.append_child("model_brush");
pugi::xml_node parent_node = node;
pugi::xml_attribute attribute;
attribute = node.append_attribute("z_order");
i32 z_order = CMEConfigurationModelBrush::getZOrder();
attribute.set_value(z_order);
node = parent_node.append_child("elements");
for(const auto& iterator : CMEConfigurationModelBrush::getElementsConfigurations())
{
std::shared_ptr<CMEConfigurationBrushElement> configuration = std::static_pointer_cast<CMEConfigurationBrushElement>(iterator);
pugi::xml_node child_node = node.append_child("element");
configuration->deserialize(child_node);
}
node = parent_node.append_child("materials");
for(const auto& iterator : CMEConfigurationModelBrush::getMaterialsConfigurations())
{
std::shared_ptr<CConfigurationMaterial> configuration = std::static_pointer_cast<CConfigurationMaterial>(iterator);
pugi::xml_node child_node = node.append_child("material");
attribute = child_node.append_attribute("filename");
attribute.set_value(configuration->getFilename().c_str());
}
document.save_file(filename.c_str());
}
#endif
