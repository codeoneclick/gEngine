// autogenerated: do not add any changes
#include "CMEConfigurationBrushElement.h"
std::string CMEConfigurationBrushElement::getName(void) const
{
const auto& iterator = m_attributes.find("/brush_element/name");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
ui8 CMEConfigurationBrushElement::getColorR(void) const
{
const auto& iterator = m_attributes.find("/brush_element/color_r");
assert(iterator != m_attributes.end());
ui8 value; iterator->second->get(&value);
return value;
}
ui8 CMEConfigurationBrushElement::getColorG(void) const
{
const auto& iterator = m_attributes.find("/brush_element/color_g");
assert(iterator != m_attributes.end());
ui8 value; iterator->second->get(&value);
return value;
}
ui8 CMEConfigurationBrushElement::getColorB(void) const
{
const auto& iterator = m_attributes.find("/brush_element/color_b");
assert(iterator != m_attributes.end());
ui8 value; iterator->second->get(&value);
return value;
}
ui8 CMEConfigurationBrushElement::getColorA(void) const
{
const auto& iterator = m_attributes.find("/brush_element/color_a");
assert(iterator != m_attributes.end());
ui8 value; iterator->second->get(&value);
return value;
}
f32 CMEConfigurationBrushElement::getWidth(void) const
{
const auto& iterator = m_attributes.find("/brush_element/width");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
f32 CMEConfigurationBrushElement::getHeight(void) const
{
const auto& iterator = m_attributes.find("/brush_element/height");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
std::shared_ptr<CConfigurationCustomModel> CMEConfigurationBrushElement::getCustomModelConfiguration(void) const
{
const auto& iterator = m_configurations.find("/brush_element/custom_model");
if(iterator == m_configurations.end())
{
return nullptr;
}
assert(iterator != m_configurations.end());
assert(iterator->second.size() != 0);
return std::static_pointer_cast<CConfigurationCustomModel>(iterator->second.at(0));
}
void CMEConfigurationBrushElement::serialize(pugi::xml_document& document, const std::string& path)
{
pugi::xpath_node node;
node = document.select_single_node((path + "/brush_element").c_str());
std::string name = node.node().attribute("name").as_string();
IConfiguration::setAttribute("/brush_element/name", std::make_shared<CConfigurationAttribute>(name));
ui8 color_r = node.node().attribute("color_r").as_uint();
IConfiguration::setAttribute("/brush_element/color_r", std::make_shared<CConfigurationAttribute>(color_r));
ui8 color_g = node.node().attribute("color_g").as_uint();
IConfiguration::setAttribute("/brush_element/color_g", std::make_shared<CConfigurationAttribute>(color_g));
ui8 color_b = node.node().attribute("color_b").as_uint();
IConfiguration::setAttribute("/brush_element/color_b", std::make_shared<CConfigurationAttribute>(color_b));
ui8 color_a = node.node().attribute("color_a").as_uint();
IConfiguration::setAttribute("/brush_element/color_a", std::make_shared<CConfigurationAttribute>(color_a));
f32 width = node.node().attribute("width").as_float();
IConfiguration::setAttribute("/brush_element/width", std::make_shared<CConfigurationAttribute>(width));
f32 height = node.node().attribute("height").as_float();
IConfiguration::setAttribute("/brush_element/height", std::make_shared<CConfigurationAttribute>(height));
std::shared_ptr<CConfigurationCustomModel> custom_model = std::make_shared<CConfigurationCustomModel>();
pugi::xpath_node custom_model_node = document.select_single_node("/brush_element/custom_model");
custom_model->serialize(custom_model_node.node().attribute("filename").as_string());
IConfiguration::setConfiguration("/brush_element/custom_model", custom_model);
}
void CMEConfigurationBrushElement::serialize(pugi::xml_document& document, pugi::xpath_node& node)
{
std::string name = node.node().attribute("name").as_string();
IConfiguration::setAttribute("/brush_element/name", std::make_shared<CConfigurationAttribute>(name));
ui8 color_r = node.node().attribute("color_r").as_uint();
IConfiguration::setAttribute("/brush_element/color_r", std::make_shared<CConfigurationAttribute>(color_r));
ui8 color_g = node.node().attribute("color_g").as_uint();
IConfiguration::setAttribute("/brush_element/color_g", std::make_shared<CConfigurationAttribute>(color_g));
ui8 color_b = node.node().attribute("color_b").as_uint();
IConfiguration::setAttribute("/brush_element/color_b", std::make_shared<CConfigurationAttribute>(color_b));
ui8 color_a = node.node().attribute("color_a").as_uint();
IConfiguration::setAttribute("/brush_element/color_a", std::make_shared<CConfigurationAttribute>(color_a));
f32 width = node.node().attribute("width").as_float();
IConfiguration::setAttribute("/brush_element/width", std::make_shared<CConfigurationAttribute>(width));
f32 height = node.node().attribute("height").as_float();
IConfiguration::setAttribute("/brush_element/height", std::make_shared<CConfigurationAttribute>(height));
std::shared_ptr<CConfigurationCustomModel> custom_model = std::make_shared<CConfigurationCustomModel>();
pugi::xpath_node custom_model_node = document.select_single_node("/brush_element/custom_model");
custom_model->serialize(custom_model_node.node().attribute("filename").as_string());
IConfiguration::setConfiguration("/brush_element/custom_model", custom_model);
}
