// autogenerated: do not add any changes
#include "CMEConfigurationSceneStage.h"
f32 CMEConfigurationSceneStage::getSizeX(void) const
{
const auto& iterator = m_attributes.find("/scene_stage/size_x");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void CMEConfigurationSceneStage::setSizeX(f32 size_x)
{
IConfiguration::setAttribute("/scene_stage/size_x", std::make_shared<CConfigurationAttribute>(size_x));
}
#endif
f32 CMEConfigurationSceneStage::getSizeY(void) const
{
const auto& iterator = m_attributes.find("/scene_stage/size_y");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void CMEConfigurationSceneStage::setSizeY(f32 size_y)
{
IConfiguration::setAttribute("/scene_stage/size_y", std::make_shared<CConfigurationAttribute>(size_y));
}
#endif
f32 CMEConfigurationSceneStage::getSizeZ(void) const
{
const auto& iterator = m_attributes.find("/scene_stage/size_z");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void CMEConfigurationSceneStage::setSizeZ(f32 size_z)
{
IConfiguration::setAttribute("/scene_stage/size_z", std::make_shared<CConfigurationAttribute>(size_z));
}
#endif
i32 CMEConfigurationSceneStage::getZOrder(void) const
{
const auto& iterator = m_attributes.find("/scene_stage/z_order");
assert(iterator != m_attributes.end());
i32 value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void CMEConfigurationSceneStage::setZOrder(i32 z_order)
{
IConfiguration::setAttribute("/scene_stage/z_order", std::make_shared<CConfigurationAttribute>(z_order));
}
#endif
std::vector<std::shared_ptr<IConfiguration>> CMEConfigurationSceneStage::getMaterialsConfigurations(void) const
{
const auto& iterator = m_configurations.find("/scene_stage/materials/material");
if(iterator == m_configurations.end())
{
return std::vector<std::shared_ptr<IConfiguration>>();
}
assert(iterator != m_configurations.end());
return iterator->second;
}
#if defined(__EDITOR__)
void CMEConfigurationSceneStage::addMaterialsConfigurations(const std::shared_ptr<CConfigurationMaterial>& material)
{
IConfiguration::setConfiguration("/scene_stage/materials/material", material);
}
#endif
#if defined(__EDITOR__)
void CMEConfigurationSceneStage::setMaterialsConfigurations(const std::shared_ptr<CConfigurationMaterial>& material, i32 index)
{
IConfiguration::setConfiguration("/scene_stage/materials/material", material, index);
}
#endif
void CMEConfigurationSceneStage::serialize(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = IConfiguration::openXMLDocument(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/scene_stage");
f32 size_x = node.node().attribute("size_x").as_float();
IConfiguration::setAttribute("/scene_stage/size_x", std::make_shared<CConfigurationAttribute>(size_x));
f32 size_y = node.node().attribute("size_y").as_float();
IConfiguration::setAttribute("/scene_stage/size_y", std::make_shared<CConfigurationAttribute>(size_y));
f32 size_z = node.node().attribute("size_z").as_float();
IConfiguration::setAttribute("/scene_stage/size_z", std::make_shared<CConfigurationAttribute>(size_z));
i32 z_order = node.node().attribute("z_order").as_int();
IConfiguration::setAttribute("/scene_stage/z_order", std::make_shared<CConfigurationAttribute>(z_order));
pugi::xpath_node_set material_nodes = document.select_nodes("/scene_stage/materials/material");
for (pugi::xpath_node_set::const_iterator iterator = material_nodes.begin(); iterator != material_nodes.end(); ++iterator)
{
std::shared_ptr<CConfigurationMaterial> material = std::make_shared<CConfigurationMaterial>();
material->serialize((*iterator).node().attribute("filename").as_string());
IConfiguration::setConfiguration("/scene_stage/materials/material", material);
}
}
#if defined(__EDITOR__)
void CMEConfigurationSceneStage::deserialize(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = document.load("");
assert(result.status == pugi::status_ok);
pugi::xml_node node = document.append_child("scene_stage");
pugi::xml_node parent_node = node;
pugi::xml_attribute attribute;
attribute = node.append_attribute("size_x");
f32 size_x = CMEConfigurationSceneStage::getSizeX();
attribute.set_value(size_x);
attribute = node.append_attribute("size_y");
f32 size_y = CMEConfigurationSceneStage::getSizeY();
attribute.set_value(size_y);
attribute = node.append_attribute("size_z");
f32 size_z = CMEConfigurationSceneStage::getSizeZ();
attribute.set_value(size_z);
attribute = node.append_attribute("z_order");
i32 z_order = CMEConfigurationSceneStage::getZOrder();
attribute.set_value(z_order);
node = parent_node.append_child("materials");
for(const auto& iterator : CMEConfigurationSceneStage::getMaterialsConfigurations())
{
std::shared_ptr<CConfigurationMaterial> configuration = std::static_pointer_cast<CConfigurationMaterial>(iterator);
pugi::xml_node child_node = node.append_child("material");
attribute = child_node.append_attribute("filename");
attribute.set_value(configuration->getFilename().c_str());
}
document.save_file(filename.c_str());
}
#endif
