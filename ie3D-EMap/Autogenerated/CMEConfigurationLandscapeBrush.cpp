// autogenerated: do not add any changes
#include "CMEConfigurationLandscapeBrush.h"
f32 CMEConfigurationLandscapeBrush::getSize(void) const
{
const auto& iterator = m_attributes.find("/landscape_brush/size");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
std::vector<std::shared_ptr<IConfiguration>> CMEConfigurationLandscapeBrush::getMaterialsConfigurations(void) const
{
const auto& iterator = m_configurations.find("/landscape_brush/materials/material");
if(iterator == m_configurations.end())
{
return std::vector<std::shared_ptr<IConfiguration>>();
}
assert(iterator != m_configurations.end());
return iterator->second;
}
void CMEConfigurationLandscapeBrush::serialize(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = IConfiguration::openXMLDocument(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/landscape_brush");
f32 size = node.node().attribute("size").as_float();
IConfiguration::setAttribute("/landscape_brush/size", std::make_shared<CConfigurationAttribute>(size));
pugi::xpath_node_set material_nodes = document.select_nodes("/landscape_brush/materials/material");
for (pugi::xpath_node_set::const_iterator iterator = material_nodes.begin(); iterator != material_nodes.end(); ++iterator)
{
std::shared_ptr<CConfigurationMaterial> material = std::make_shared<CConfigurationMaterial>();
material->serialize((*iterator).node().attribute("filename").as_string());
IConfiguration::setConfiguration("/landscape_brush/materials/material", material);
}
}
