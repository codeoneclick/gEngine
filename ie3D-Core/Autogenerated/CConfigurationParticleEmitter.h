// autogenerated: do not add any changes
#ifndef CConfigurationParticleEmitter_h
#define CConfigurationParticleEmitter_h
#include "IConfiguration.h"
#include "CConfigurationMaterial.h"
class CConfigurationParticleEmitter : public IConfigurationGameObject
{
public:
CConfigurationParticleEmitter(void) = default;
~CConfigurationParticleEmitter(void) = default;
ui32 getNumParticles(void) const;
ui32 getDuration(void) const;
f32 getDurationRandomess(void) const;
f32 getVelocitySensitivity(void) const;
f32 getMinHorizontalVelocity(void) const;
f32 getMaxHorizontalVelocity(void) const;
f32 getMinVerticalVelocity(void) const;
f32 getMaxVerticalVelocity(void) const;
f32 getEndVelocity(void) const;
f32 getGravityX(void) const;
f32 getGravityY(void) const;
f32 getGravityZ(void) const;
ui8 getSourceColorR(void) const;
ui8 getSourceColorG(void) const;
ui8 getSourceColorB(void) const;
ui8 getSourceColorA(void) const;
ui8 getDestinationColorR(void) const;
ui8 getDestinationColorG(void) const;
ui8 getDestinationColorB(void) const;
ui8 getDestinationColorA(void) const;
f32 getSourceSizeX(void) const;
f32 getSourceSizeY(void) const;
f32 getDestinationSizeX(void) const;
f32 getDestinationSizeY(void) const;
ui32 getMinEmittInterval(void) const;
ui32 getMaxEmittInterval(void) const;
std::vector<std::shared_ptr<IConfiguration>> getMaterialsConfigurations(void) const;
void serialize(const std::string& filename);
};
#endif
