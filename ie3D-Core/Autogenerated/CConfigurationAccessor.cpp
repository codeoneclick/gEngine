// autogenerated: do not add any changes
#include "CConfigurationAccessor.h"
void CConfigurationAccessor::getConfigurationLandscape(const std::string& filename, const std::shared_ptr<IConfigurationLoadingHandler>& handler) const
{
std::shared_ptr<CConfigurationLandscape> configuration = std::make_shared<CConfigurationLandscape>();
configuration->serialize(filename);
assert(configuration != nullptr);
assert(handler != nullptr);
handler->onConfigurationLoaded(configuration, true);
}
void CConfigurationAccessor::getConfigurationMaterial(const std::string& filename, const std::shared_ptr<IConfigurationLoadingHandler>& handler) const
{
std::shared_ptr<CConfigurationMaterial> configuration = std::make_shared<CConfigurationMaterial>();
configuration->serialize(filename);
assert(configuration != nullptr);
assert(handler != nullptr);
handler->onConfigurationLoaded(configuration, true);
}
void CConfigurationAccessor::getConfigurationModel(const std::string& filename, const std::shared_ptr<IConfigurationLoadingHandler>& handler) const
{
std::shared_ptr<CConfigurationModel> configuration = std::make_shared<CConfigurationModel>();
configuration->serialize(filename);
assert(configuration != nullptr);
assert(handler != nullptr);
handler->onConfigurationLoaded(configuration, true);
}
void CConfigurationAccessor::getConfigurationOcean(const std::string& filename, const std::shared_ptr<IConfigurationLoadingHandler>& handler) const
{
std::shared_ptr<CConfigurationOcean> configuration = std::make_shared<CConfigurationOcean>();
configuration->serialize(filename);
assert(configuration != nullptr);
assert(handler != nullptr);
handler->onConfigurationLoaded(configuration, true);
}
void CConfigurationAccessor::getConfigurationOutputTechnique(const std::string& filename, const std::shared_ptr<IConfigurationLoadingHandler>& handler) const
{
std::shared_ptr<CConfigurationOutputTechnique> configuration = std::make_shared<CConfigurationOutputTechnique>();
configuration->serialize(filename);
assert(configuration != nullptr);
assert(handler != nullptr);
handler->onConfigurationLoaded(configuration, true);
}
void CConfigurationAccessor::getConfigurationParticleEmitter(const std::string& filename, const std::shared_ptr<IConfigurationLoadingHandler>& handler) const
{
std::shared_ptr<CConfigurationParticleEmitter> configuration = std::make_shared<CConfigurationParticleEmitter>();
configuration->serialize(filename);
assert(configuration != nullptr);
assert(handler != nullptr);
handler->onConfigurationLoaded(configuration, true);
}
void CConfigurationAccessor::getConfigurationSSTechnique(const std::string& filename, const std::shared_ptr<IConfigurationLoadingHandler>& handler) const
{
std::shared_ptr<CConfigurationSSTechnique> configuration = std::make_shared<CConfigurationSSTechnique>();
configuration->serialize(filename);
assert(configuration != nullptr);
assert(handler != nullptr);
handler->onConfigurationLoaded(configuration, true);
}
void CConfigurationAccessor::getConfigurationTransition(const std::string& filename, const std::shared_ptr<IConfigurationLoadingHandler>& handler) const
{
std::shared_ptr<CConfigurationTransition> configuration = std::make_shared<CConfigurationTransition>();
configuration->serialize(filename);
assert(configuration != nullptr);
assert(handler != nullptr);
handler->onConfigurationLoaded(configuration, true);
}
void CConfigurationAccessor::getConfigurationWSTechnique(const std::string& filename, const std::shared_ptr<IConfigurationLoadingHandler>& handler) const
{
std::shared_ptr<CConfigurationWSTechnique> configuration = std::make_shared<CConfigurationWSTechnique>();
configuration->serialize(filename);
assert(configuration != nullptr);
assert(handler != nullptr);
handler->onConfigurationLoaded(configuration, true);
}
