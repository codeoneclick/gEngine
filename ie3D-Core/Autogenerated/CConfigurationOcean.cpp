// autogenerated: do not add any changes
#include "CConfigurationOcean.h"
ui32 CConfigurationOcean::getSize(void) const
{
const auto& iterator = m_attributes.find("/ocean/size");
assert(iterator != m_attributes.end());
ui32 value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void CConfigurationOcean::set_size(ui32 size)
{
IConfiguration::setAttribute("/ocean/size", std::make_shared<CConfigurationAttribute>(size));
}
#endif
f32 CConfigurationOcean::getAltitude(void) const
{
const auto& iterator = m_attributes.find("/ocean/altitude");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void CConfigurationOcean::set_altitude(f32 altitude)
{
IConfiguration::setAttribute("/ocean/altitude", std::make_shared<CConfigurationAttribute>(altitude));
}
#endif
f32 CConfigurationOcean::getWaveGenerationInterval(void) const
{
const auto& iterator = m_attributes.find("/ocean/wave_generation_interval");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void CConfigurationOcean::set_wave_generation_interval(f32 wave_generation_interval)
{
IConfiguration::setAttribute("/ocean/wave_generation_interval", std::make_shared<CConfigurationAttribute>(wave_generation_interval));
}
#endif
std::vector<std::shared_ptr<IConfiguration>> CConfigurationOcean::getMaterialsConfigurations(void) const
{
const auto& iterator = m_configurations.find("/ocean/materials/material");
if(iterator == m_configurations.end())
{
return std::vector<std::shared_ptr<IConfiguration>>();
}
assert(iterator != m_configurations.end());
return iterator->second;
}
#if defined(__EDITOR__)
void CConfigurationOcean::add_material(const std::shared_ptr<CConfigurationMaterial>& material)
{
IConfiguration::setConfiguration("/ocean/materials/material", material);
}
#endif
#if defined(__EDITOR__)
void CConfigurationOcean::set_material(const std::shared_ptr<CConfigurationMaterial>& material, i32 index)
{
IConfiguration::setConfiguration("/ocean/materials/material", material, index);
}
#endif
void CConfigurationOcean::serialize(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = IConfiguration::openXMLDocument(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/ocean");
ui32 size = node.node().attribute("size").as_uint();
IConfiguration::setAttribute("/ocean/size", std::make_shared<CConfigurationAttribute>(size));
f32 altitude = node.node().attribute("altitude").as_float();
IConfiguration::setAttribute("/ocean/altitude", std::make_shared<CConfigurationAttribute>(altitude));
f32 wave_generation_interval = node.node().attribute("wave_generation_interval").as_float();
IConfiguration::setAttribute("/ocean/wave_generation_interval", std::make_shared<CConfigurationAttribute>(wave_generation_interval));
pugi::xpath_node_set material_nodes = document.select_nodes("/ocean/materials/material");
for (pugi::xpath_node_set::const_iterator iterator = material_nodes.begin(); iterator != material_nodes.end(); ++iterator)
{
std::shared_ptr<CConfigurationMaterial> material = std::make_shared<CConfigurationMaterial>();
material->serialize((*iterator).node().attribute("filename").as_string());
IConfiguration::setConfiguration("/ocean/materials/material", material);
}
}
