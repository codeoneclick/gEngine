// autogenerated: do not add any changes
#include "CConfigurationSkybox.h"
std::vector<std::shared_ptr<IConfiguration>> CConfigurationSkybox::getMaterialsConfigurations(void) const
{
const auto& iterator = m_configurations.find("/skybox/materials/material");
if(iterator == m_configurations.end())
{
return std::vector<std::shared_ptr<IConfiguration>>();
}
assert(iterator != m_configurations.end());
return iterator->second;
}
#if defined(__EDITOR__)
void CConfigurationSkybox::addMaterialsConfigurations(const std::shared_ptr<CConfigurationMaterial>& material)
{
IConfiguration::setConfiguration("/skybox/materials/material", material);
}
#endif
#if defined(__EDITOR__)
void CConfigurationSkybox::setMaterialsConfigurations(const std::shared_ptr<CConfigurationMaterial>& material, i32 index)
{
IConfiguration::setConfiguration("/skybox/materials/material", material, index);
}
#endif
void CConfigurationSkybox::serialize(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = IConfiguration::openXMLDocument(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/skybox");
pugi::xpath_node_set material_nodes = document.select_nodes("/skybox/materials/material");
for (pugi::xpath_node_set::const_iterator iterator = material_nodes.begin(); iterator != material_nodes.end(); ++iterator)
{
std::shared_ptr<CConfigurationMaterial> material = std::make_shared<CConfigurationMaterial>();
material->serialize((*iterator).node().attribute("filename").as_string());
IConfiguration::setConfiguration("/skybox/materials/material", material);
}
}
#if defined(__EDITOR__)
void CConfigurationSkybox::deserialize(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = document.load("");
assert(result.status == pugi::status_ok);
pugi::xml_node node = document.append_child("skybox");
pugi::xml_attribute attribute;
document.save_file(filename.c_str());
}
#endif
