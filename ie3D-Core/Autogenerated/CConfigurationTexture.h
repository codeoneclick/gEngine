// autogenerated: do not add any changes
#ifndef CConfigurationTexture_h
#define CConfigurationTexture_h
#include "IConfiguration.h"
class CConfigurationTexture : public IConfiguration
{
public:
CConfigurationTexture(void) = default;
~CConfigurationTexture(void) = default;
bool getCubemap(void) const;
#if defined(__EDITOR__)
void setCubemap(bool is_cubemap);
#endif
std::string getTextureFilename(void) const;
#if defined(__EDITOR__)
void setTextureFilename(std::string filename);
#endif
std::string getTextureFilenamePositiveX(void) const;
#if defined(__EDITOR__)
void setTextureFilenamePositiveX(std::string filename_x_positive);
#endif
std::string getTextureFilenameNegativeX(void) const;
#if defined(__EDITOR__)
void setTextureFilenameNegativeX(std::string filename_x_negative);
#endif
std::string getTextureFilenamePositiveY(void) const;
#if defined(__EDITOR__)
void setTextureFilenamePositiveY(std::string filename_y_positive);
#endif
std::string getTextureFilenameNegativeY(void) const;
#if defined(__EDITOR__)
void setTextureFilenameNegativeY(std::string filename_y_negative);
#endif
std::string getTextureFilenamePositiveZ(void) const;
#if defined(__EDITOR__)
void setTextureFilenamePositiveZ(std::string filename_z_positive);
#endif
std::string getTextureFilenameNegativeZ(void) const;
#if defined(__EDITOR__)
void setTextureFilenameNegativeZ(std::string filename_z_negative);
#endif
std::string getRenderTechniqueTextureName(void) const;
#if defined(__EDITOR__)
void setRenderTechniqueTextureName(std::string render_operation_name);
#endif
ui32 getSamplerIndex(void) const;
#if defined(__EDITOR__)
void setSamplerIndex(ui32 sampler_index);
#endif
GLenum getWrapMode(void) const;
#if defined(__EDITOR__)
void setWrapMode(GLenum wrap_mode);
#endif
GLenum getMagFilter(void) const;
#if defined(__EDITOR__)
void setMagFilter(GLenum mag_filter);
#endif
GLenum getMinFilter(void) const;
#if defined(__EDITOR__)
void setMinFilter(GLenum min_filter);
#endif
void serialize(pugi::xml_document& document, const std::string& path);
#if defined(__EDITOR__)
void deserialize(pugi::xml_node& node);
#endif
void serialize(pugi::xml_document& document, pugi::xpath_node& node);
};
#endif
