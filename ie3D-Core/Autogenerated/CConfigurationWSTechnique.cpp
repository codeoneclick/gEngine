// autogenerated: do not add any changes
#include "CConfigurationWSTechnique.h"
std::string CConfigurationWSTechnique::getGUID(void) const
{
const auto& iterator = m_attributes.find("/ws_technique/guid");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void CConfigurationWSTechnique::setGUID(std::string guid)
{
IConfiguration::setAttribute("/ws_technique/guid", std::make_shared<CConfigurationAttribute>(guid));
}
#endif
bool CConfigurationWSTechnique::getDrawBoundingBoxes(void) const
{
const auto& iterator = m_attributes.find("/ws_technique/are_draw_bounding_boxes");
assert(iterator != m_attributes.end());
bool value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void CConfigurationWSTechnique::setDrawBoundingBoxes(bool are_draw_bounding_boxes)
{
IConfiguration::setAttribute("/ws_technique/are_draw_bounding_boxes", std::make_shared<CConfigurationAttribute>(are_draw_bounding_boxes));
}
#endif
ui32 CConfigurationWSTechnique::getIndex(void) const
{
const auto& iterator = m_attributes.find("/ws_technique/index");
assert(iterator != m_attributes.end());
ui32 value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void CConfigurationWSTechnique::setIndex(ui32 index)
{
IConfiguration::setAttribute("/ws_technique/index", std::make_shared<CConfigurationAttribute>(index));
}
#endif
ui32 CConfigurationWSTechnique::getScreenWidth(void) const
{
const auto& iterator = m_attributes.find("/ws_technique/screen_width");
assert(iterator != m_attributes.end());
ui32 value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void CConfigurationWSTechnique::setScreenWidth(ui32 screen_width)
{
IConfiguration::setAttribute("/ws_technique/screen_width", std::make_shared<CConfigurationAttribute>(screen_width));
}
#endif
ui32 CConfigurationWSTechnique::getScreenHeight(void) const
{
const auto& iterator = m_attributes.find("/ws_technique/screen_height");
assert(iterator != m_attributes.end());
ui32 value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void CConfigurationWSTechnique::setScreenHeight(ui32 screen_height)
{
IConfiguration::setAttribute("/ws_technique/screen_height", std::make_shared<CConfigurationAttribute>(screen_height));
}
#endif
f32 CConfigurationWSTechnique::getClearColorR(void) const
{
const auto& iterator = m_attributes.find("/ws_technique/clear_color_r");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void CConfigurationWSTechnique::setClearColorR(f32 clear_color_r)
{
IConfiguration::setAttribute("/ws_technique/clear_color_r", std::make_shared<CConfigurationAttribute>(clear_color_r));
}
#endif
f32 CConfigurationWSTechnique::getClearColorG(void) const
{
const auto& iterator = m_attributes.find("/ws_technique/clear_color_g");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void CConfigurationWSTechnique::setClearColorG(f32 clear_color_g)
{
IConfiguration::setAttribute("/ws_technique/clear_color_g", std::make_shared<CConfigurationAttribute>(clear_color_g));
}
#endif
f32 CConfigurationWSTechnique::getClearColorB(void) const
{
const auto& iterator = m_attributes.find("/ws_technique/clear_color_b");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void CConfigurationWSTechnique::setClearColorB(f32 clear_color_b)
{
IConfiguration::setAttribute("/ws_technique/clear_color_b", std::make_shared<CConfigurationAttribute>(clear_color_b));
}
#endif
f32 CConfigurationWSTechnique::getClearColorA(void) const
{
const auto& iterator = m_attributes.find("/ws_technique/clear_color_a");
assert(iterator != m_attributes.end());
f32 value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void CConfigurationWSTechnique::setClearColorA(f32 clear_color_a)
{
IConfiguration::setAttribute("/ws_technique/clear_color_a", std::make_shared<CConfigurationAttribute>(clear_color_a));
}
#endif
void CConfigurationWSTechnique::serialize(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = IConfiguration::openXMLDocument(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/ws_technique");
std::string guid = node.node().attribute("guid").as_string();
IConfiguration::setAttribute("/ws_technique/guid", std::make_shared<CConfigurationAttribute>(guid));
bool are_draw_bounding_boxes = node.node().attribute("are_draw_bounding_boxes").as_bool();
IConfiguration::setAttribute("/ws_technique/are_draw_bounding_boxes", std::make_shared<CConfigurationAttribute>(are_draw_bounding_boxes));
ui32 index = node.node().attribute("index").as_uint();
IConfiguration::setAttribute("/ws_technique/index", std::make_shared<CConfigurationAttribute>(index));
ui32 screen_width = node.node().attribute("screen_width").as_uint();
IConfiguration::setAttribute("/ws_technique/screen_width", std::make_shared<CConfigurationAttribute>(screen_width));
ui32 screen_height = node.node().attribute("screen_height").as_uint();
IConfiguration::setAttribute("/ws_technique/screen_height", std::make_shared<CConfigurationAttribute>(screen_height));
f32 clear_color_r = node.node().attribute("clear_color_r").as_float();
IConfiguration::setAttribute("/ws_technique/clear_color_r", std::make_shared<CConfigurationAttribute>(clear_color_r));
f32 clear_color_g = node.node().attribute("clear_color_g").as_float();
IConfiguration::setAttribute("/ws_technique/clear_color_g", std::make_shared<CConfigurationAttribute>(clear_color_g));
f32 clear_color_b = node.node().attribute("clear_color_b").as_float();
IConfiguration::setAttribute("/ws_technique/clear_color_b", std::make_shared<CConfigurationAttribute>(clear_color_b));
f32 clear_color_a = node.node().attribute("clear_color_a").as_float();
IConfiguration::setAttribute("/ws_technique/clear_color_a", std::make_shared<CConfigurationAttribute>(clear_color_a));
}
#if defined(__EDITOR__)
void CConfigurationWSTechnique::deserialize(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = document.load("");
assert(result.status == pugi::status_ok);
pugi::xml_node node = document.append_child("ws_technique");
pugi::xml_attribute attribute;
attribute = node.append_attribute("guid");
std::string guid = CConfigurationWSTechnique::getGUID();
attribute.set_value(guid.c_str());
attribute = node.append_attribute("are_draw_bounding_boxes");
bool are_draw_bounding_boxes = CConfigurationWSTechnique::getDrawBoundingBoxes();
attribute.set_value(are_draw_bounding_boxes);
attribute = node.append_attribute("index");
ui32 index = CConfigurationWSTechnique::getIndex();
attribute.set_value(index);
attribute = node.append_attribute("screen_width");
ui32 screen_width = CConfigurationWSTechnique::getScreenWidth();
attribute.set_value(screen_width);
attribute = node.append_attribute("screen_height");
ui32 screen_height = CConfigurationWSTechnique::getScreenHeight();
attribute.set_value(screen_height);
attribute = node.append_attribute("clear_color_r");
f32 clear_color_r = CConfigurationWSTechnique::getClearColorR();
attribute.set_value(clear_color_r);
attribute = node.append_attribute("clear_color_g");
f32 clear_color_g = CConfigurationWSTechnique::getClearColorG();
attribute.set_value(clear_color_g);
attribute = node.append_attribute("clear_color_b");
f32 clear_color_b = CConfigurationWSTechnique::getClearColorB();
attribute.set_value(clear_color_b);
attribute = node.append_attribute("clear_color_a");
f32 clear_color_a = CConfigurationWSTechnique::getClearColorA();
attribute.set_value(clear_color_a);
document.save_file(filename.c_str());
}
#endif
