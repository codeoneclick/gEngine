// autogenerated: do not add any changes
#include "CConfigurationOutputTechnique.h"
std::string CConfigurationOutputTechnique::getGUID(void) const
{
const auto& iterator = m_attributes.find("/output_technique/guid");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void CConfigurationOutputTechnique::set_guid(std::string guid)
{
IConfiguration::setAttribute("/output_technique/guid", std::make_shared<CConfigurationAttribute>(guid));
}
#endif
std::shared_ptr<CConfigurationMaterial> CConfigurationOutputTechnique::getConfigurationMaterial(void) const
{
const auto& iterator = m_configurations.find("/output_technique/material");
if(iterator == m_configurations.end())
{
return nullptr;
}
assert(iterator != m_configurations.end());
assert(iterator->second.size() != 0);
return std::static_pointer_cast<CConfigurationMaterial>(iterator->second.at(0));
}
#if defined(__EDITOR__)
void CConfigurationOutputTechnique::set_material(const std::shared_ptr<CConfigurationMaterial>& material)
{
IConfiguration::setConfiguration("/output_technique/material", material, 0);
}
#endif
void CConfigurationOutputTechnique::serialize(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = IConfiguration::openXMLDocument(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/output_technique");
std::string guid = node.node().attribute("guid").as_string();
IConfiguration::setAttribute("/output_technique/guid", std::make_shared<CConfigurationAttribute>(guid));
std::shared_ptr<CConfigurationMaterial> material = std::make_shared<CConfigurationMaterial>();
pugi::xpath_node material_node = document.select_single_node("/output_technique/material");
material->serialize(material_node.node().attribute("filename").as_string());
IConfiguration::setConfiguration("/output_technique/material", material);
}
