// autogenerated: do not add any changes
#include "CConfigurationModel.h"
std::string CConfigurationModel::getMeshFilename(void) const
{
const auto& iterator = m_attributes.find("/model/mesh_filename");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void CConfigurationModel::setMeshFilename(std::string mesh_filename)
{
IConfiguration::setAttribute("/model/mesh_filename", std::make_shared<CConfigurationAttribute>(mesh_filename));
}
#endif
i32 CConfigurationModel::getZOrder(void) const
{
const auto& iterator = m_attributes.find("/model/z_order");
assert(iterator != m_attributes.end());
i32 value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void CConfigurationModel::setZOrder(i32 z_order)
{
IConfiguration::setAttribute("/model/z_order", std::make_shared<CConfigurationAttribute>(z_order));
}
#endif
bool CConfigurationModel::getBatching(void) const
{
const auto& iterator = m_attributes.find("/model/is_batching");
assert(iterator != m_attributes.end());
bool value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void CConfigurationModel::setBatching(bool is_batching)
{
IConfiguration::setAttribute("/model/is_batching", std::make_shared<CConfigurationAttribute>(is_batching));
}
#endif
std::vector<std::shared_ptr<IConfiguration>> CConfigurationModel::getMaterialsConfigurations(void) const
{
const auto& iterator = m_configurations.find("/model/materials/material");
if(iterator == m_configurations.end())
{
return std::vector<std::shared_ptr<IConfiguration>>();
}
assert(iterator != m_configurations.end());
return iterator->second;
}
#if defined(__EDITOR__)
void CConfigurationModel::addMaterialsConfigurations(const std::shared_ptr<CConfigurationMaterial>& material)
{
IConfiguration::setConfiguration("/model/materials/material", material);
}
#endif
#if defined(__EDITOR__)
void CConfigurationModel::setMaterialsConfigurations(const std::shared_ptr<CConfigurationMaterial>& material, i32 index)
{
IConfiguration::setConfiguration("/model/materials/material", material, index);
}
#endif
std::vector<std::shared_ptr<IConfiguration>> CConfigurationModel::getAnimationsConfigurations(void) const
{
const auto& iterator = m_configurations.find("/model/animations/animation");
if(iterator == m_configurations.end())
{
return std::vector<std::shared_ptr<IConfiguration>>();
}
assert(iterator != m_configurations.end());
return iterator->second;
}
#if defined(__EDITOR__)
void CConfigurationModel::addAnimationsConfigurations(const std::shared_ptr<CConfigurationAnimation>& animation)
{
IConfiguration::setConfiguration("/model/animations/animation", animation);
}
#endif
#if defined(__EDITOR__)
void CConfigurationModel::setAnimationsConfigurations(const std::shared_ptr<CConfigurationAnimation>& animation, i32 index)
{
IConfiguration::setConfiguration("/model/animations/animation", animation, index);
}
#endif
void CConfigurationModel::serialize(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = IConfiguration::openXMLDocument(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/model");
std::string mesh_filename = node.node().attribute("mesh_filename").as_string();
IConfiguration::setAttribute("/model/mesh_filename", std::make_shared<CConfigurationAttribute>(mesh_filename));
i32 z_order = node.node().attribute("z_order").as_int();
IConfiguration::setAttribute("/model/z_order", std::make_shared<CConfigurationAttribute>(z_order));
bool is_batching = node.node().attribute("is_batching").as_bool();
IConfiguration::setAttribute("/model/is_batching", std::make_shared<CConfigurationAttribute>(is_batching));
pugi::xpath_node_set material_nodes = document.select_nodes("/model/materials/material");
for (pugi::xpath_node_set::const_iterator iterator = material_nodes.begin(); iterator != material_nodes.end(); ++iterator)
{
std::shared_ptr<CConfigurationMaterial> material = std::make_shared<CConfigurationMaterial>();
material->serialize((*iterator).node().attribute("filename").as_string());
IConfiguration::setConfiguration("/model/materials/material", material);
}
pugi::xpath_node_set animation_nodes = document.select_nodes("/model/animations/animation");
for (pugi::xpath_node_set::const_iterator iterator = animation_nodes.begin(); iterator != animation_nodes.end(); ++iterator)
{
std::shared_ptr<CConfigurationAnimation> animation = std::make_shared<CConfigurationAnimation>();
pugi::xpath_node node = (*iterator);
animation->serialize(document, node);
IConfiguration::setConfiguration("/model/animations/animation", animation);
}
}
#if defined(__EDITOR__)
void CConfigurationModel::deserialize(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = document.load("");
assert(result.status == pugi::status_ok);
pugi::xml_node node = document.append_child("model");
pugi::xml_node parent_node = node;
pugi::xml_attribute attribute;
attribute = node.append_attribute("mesh_filename");
std::string mesh_filename = CConfigurationModel::getMeshFilename();
attribute.set_value(mesh_filename.c_str());
attribute = node.append_attribute("z_order");
i32 z_order = CConfigurationModel::getZOrder();
attribute.set_value(z_order);
attribute = node.append_attribute("is_batching");
bool is_batching = CConfigurationModel::getBatching();
attribute.set_value(is_batching);
node = parent_node.append_child("materials");
for(const auto& iterator : CConfigurationModel::getMaterialsConfigurations())
{
std::shared_ptr<CConfigurationMaterial> configuration = std::static_pointer_cast<CConfigurationMaterial>(iterator);
pugi::xml_node child_node = node.append_child("material");
attribute = child_node.append_attribute("filename");
attribute.set_value(configuration->getFilename().c_str());
}
node = parent_node.append_child("animations");
for(const auto& iterator : CConfigurationModel::getAnimationsConfigurations())
{
std::shared_ptr<CConfigurationAnimation> configuration = std::static_pointer_cast<CConfigurationAnimation>(iterator);
pugi::xml_node child_node = node.append_child("animation");
configuration->deserialize(child_node);
}
document.save_file(filename.c_str());
}
#endif
