// autogenerated: do not add any changes
#include "CConfigurationTransition.h"
std::string CConfigurationTransition::getGUID(void) const
{
const auto& iterator = m_attributes.find("/transition/guid");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value;
}
#if defined(__EDITOR__)
void CConfigurationTransition::setGUID(std::string guid)
{
IConfiguration::setAttribute("/transition/guid", std::make_shared<CConfigurationAttribute>(guid));
}
#endif
std::shared_ptr<CConfigurationOutputTechnique> CConfigurationTransition::getConfigurationOutputTechnique(void) const
{
const auto& iterator = m_configurations.find("/transition/output_technique");
if(iterator == m_configurations.end())
{
return nullptr;
}
assert(iterator != m_configurations.end());
assert(iterator->second.size() != 0);
return std::static_pointer_cast<CConfigurationOutputTechnique>(iterator->second.at(0));
}
#if defined(__EDITOR__)
void CConfigurationTransition::setConfigurationOutputTechnique(const std::shared_ptr<CConfigurationOutputTechnique>& output_technique)
{
IConfiguration::setConfiguration("/transition/output_technique", output_technique, 0);
}
#endif
std::vector<std::shared_ptr<IConfiguration>> CConfigurationTransition::getConfigurationWSTechnique(void) const
{
const auto& iterator = m_configurations.find("/transition/ws_techniques/ws_technique");
if(iterator == m_configurations.end())
{
return std::vector<std::shared_ptr<IConfiguration>>();
}
assert(iterator != m_configurations.end());
return iterator->second;
}
#if defined(__EDITOR__)
void CConfigurationTransition::addConfigurationWSTechnique(const std::shared_ptr<CConfigurationWSTechnique>& ws_technique)
{
IConfiguration::setConfiguration("/transition/ws_techniques/ws_technique", ws_technique);
}
#endif
#if defined(__EDITOR__)
void CConfigurationTransition::setConfigurationWSTechnique(const std::shared_ptr<CConfigurationWSTechnique>& ws_technique, i32 index)
{
IConfiguration::setConfiguration("/transition/ws_techniques/ws_technique", ws_technique, index);
}
#endif
std::vector<std::shared_ptr<IConfiguration>> CConfigurationTransition::getConfigurationSSTechnique(void) const
{
const auto& iterator = m_configurations.find("/transition/ss_techniques/ss_technique");
if(iterator == m_configurations.end())
{
return std::vector<std::shared_ptr<IConfiguration>>();
}
assert(iterator != m_configurations.end());
return iterator->second;
}
#if defined(__EDITOR__)
void CConfigurationTransition::addConfigurationSSTechnique(const std::shared_ptr<CConfigurationSSTechnique>& ss_technique)
{
IConfiguration::setConfiguration("/transition/ss_techniques/ss_technique", ss_technique);
}
#endif
#if defined(__EDITOR__)
void CConfigurationTransition::setConfigurationSSTechnique(const std::shared_ptr<CConfigurationSSTechnique>& ss_technique, i32 index)
{
IConfiguration::setConfiguration("/transition/ss_techniques/ss_technique", ss_technique, index);
}
#endif
void CConfigurationTransition::serialize(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = IConfiguration::openXMLDocument(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/transition");
std::string guid = node.node().attribute("guid").as_string();
IConfiguration::setAttribute("/transition/guid", std::make_shared<CConfigurationAttribute>(guid));
std::shared_ptr<CConfigurationOutputTechnique> output_technique = std::make_shared<CConfigurationOutputTechnique>();
pugi::xpath_node output_technique_node = document.select_single_node("/transition/output_technique");
output_technique->serialize(output_technique_node.node().attribute("filename").as_string());
IConfiguration::setConfiguration("/transition/output_technique", output_technique);
pugi::xpath_node_set ws_technique_nodes = document.select_nodes("/transition/ws_techniques/ws_technique");
for (pugi::xpath_node_set::const_iterator iterator = ws_technique_nodes.begin(); iterator != ws_technique_nodes.end(); ++iterator)
{
std::shared_ptr<CConfigurationWSTechnique> ws_technique = std::make_shared<CConfigurationWSTechnique>();
ws_technique->serialize((*iterator).node().attribute("filename").as_string());
IConfiguration::setConfiguration("/transition/ws_techniques/ws_technique", ws_technique);
}
pugi::xpath_node_set ss_technique_nodes = document.select_nodes("/transition/ss_techniques/ss_technique");
for (pugi::xpath_node_set::const_iterator iterator = ss_technique_nodes.begin(); iterator != ss_technique_nodes.end(); ++iterator)
{
std::shared_ptr<CConfigurationSSTechnique> ss_technique = std::make_shared<CConfigurationSSTechnique>();
ss_technique->serialize((*iterator).node().attribute("filename").as_string());
IConfiguration::setConfiguration("/transition/ss_techniques/ss_technique", ss_technique);
}
}
#if defined(__EDITOR__)
void CConfigurationTransition::deserialize(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = document.load("");
assert(result.status == pugi::status_ok);
pugi::xml_node node = document.append_child("transition");
pugi::xml_node parent_node = node;
pugi::xml_attribute attribute;
attribute = node.append_attribute("guid");
std::string guid = CConfigurationTransition::getGUID();
attribute.set_value(guid.c_str());
node = parent_node.append_child("output_technique");
attribute = node.append_attribute("filename");
attribute.set_value(IConfiguration::getFilename().c_str());
node = parent_node.append_child("ws_techniques");
for(const auto& iterator : CConfigurationTransition::getConfigurationWSTechnique())
{
std::shared_ptr<CConfigurationWSTechnique> configuration = std::static_pointer_cast<CConfigurationWSTechnique>(iterator);
pugi::xml_node child_node = node.append_child("ws_technique");
attribute = child_node.append_attribute("filename");
attribute.set_value(configuration->getFilename().c_str());
}
node = parent_node.append_child("ss_techniques");
for(const auto& iterator : CConfigurationTransition::getConfigurationSSTechnique())
{
std::shared_ptr<CConfigurationSSTechnique> configuration = std::static_pointer_cast<CConfigurationSSTechnique>(iterator);
pugi::xml_node child_node = node.append_child("ss_technique");
attribute = child_node.append_attribute("filename");
attribute.set_value(configuration->getFilename().c_str());
}
document.save_file(filename.c_str());
}
#endif
