// autogenerated: do not add any changes
std::string CConfigurationMaterial::getTechniqueName(void) const
{
const auto& iterator = m_attributes.find("/material/technique_name");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value
}
bool CConfigurationMaterial::isDepthTest(void) const
{
const auto& iterator = m_attributes.find("/material/is_depth_test");
assert(iterator != m_attributes.end());
bool value; iterator->second->get(&value);
return value
}
bool CConfigurationMaterial::isDepthMask(void) const
{
const auto& iterator = m_attributes.find("/material/is_depth_mask");
assert(iterator != m_attributes.end());
bool value; iterator->second->get(&value);
return value
}
std::shared_ptr<CConfigurationShader> CConfigurationMaterial::getConfigurationShader(void) const
{
const auto& iterator = m_configurations.find("/material/shader");
assert(iterator != m_configurations.end());
assert(iterator->second.size() != 0;
return std::static_pointer_cast<CConfigurationShader>(iterator->second.at(0));
}
std::vector<std::shared_ptr<CConfigurationTexture>> CConfigurationMaterial::getConfigurationsTextures(void) const
{
const auto& iterator = m_configurations.find("/material/textures/texture");
assert(iterator != m_configurations.end());
return iterator->second;
}
std::shared_ptr<CConfigurationMaterial> CConfigurationMaterial::serialize(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = IConfiguration::openXMLDocument(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/material");
std::string technique_name = node.node().attribute("technique_name").as_string();
IConfiguration::setAttribute("/material/technique_name", std::make_shared<CConfigurationAttribute>(technique_name));
bool is_depth_test = node.node().attribute("is_depth_test").as_bool();
IConfiguration::setAttribute("/material/is_depth_test", std::make_shared<CConfigurationAttribute>(is_depth_test));
bool is_depth_mask = node.node().attribute("is_depth_mask").as_bool();
IConfiguration::setAttribute("/material/is_depth_mask", std::make_shared<CConfigurationAttribute>(is_depth_mask));
std::shared_ptr<CConfigurationShader> shader = std::make_shared<CConfigurationShader>();
shader->serialize(document, "/material");
IConfiguration::setConfiguration("/material/shader", shader);
pugi::xpath_node_set texture_nodes = document.select_nodes("/material/textures/texture");
for (pugi::xpath_node_set::const_iterator iterator = texture_nodes.begin(); iterator != texture_nodes.end(); ++iterator)
{
std::shared_ptr<CConfigurationTexture> texture = std::make_shared<CConfigurationTexture>();
texture->serialize(document, "/material/textures");
IConfiguration::setConfiguration("/material/textures/texture", texture);
}
}
