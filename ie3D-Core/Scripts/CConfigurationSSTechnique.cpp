// autogenerated: do not add any changes
std::string CConfigurationSSTechnique::getGUID(void) const
{
const auto& iterator = m_attributes.find("/ss_technique/guid");
assert(iterator != m_attributes.end());
std::string value; iterator->second->get(&value);
return value
}
ui32 CConfigurationSSTechnique::getScreenWidth(void) const
{
const auto& iterator = m_attributes.find("/ss_technique/screen_width");
assert(iterator != m_attributes.end());
ui32 value; iterator->second->get(&value);
return value
}
ui32 CConfigurationSSTechnique::getScreenHeight(void) const
{
const auto& iterator = m_attributes.find("/ss_technique/screen_height");
assert(iterator != m_attributes.end());
ui32 value; iterator->second->get(&value);
return value
}
std::shared_ptr<CConfigurationMaterial> CConfigurationSSTechnique::getConfigurationMaterial(void) const
{
const auto& iterator = m_configurations.find("/ss_technique/material");
assert(iterator != m_configurations.end());
assert(iterator->second.size() != 0;
return std::static_pointer_cast<CConfigurationMaterial>(iterator->second.at(0));
}
std::shared_ptr<CConfigurationSSTechnique> CConfigurationSSTechnique::serialize(const std::string& filename)
{
pugi::xml_document document;
pugi::xml_parse_result result = IConfiguration::openXMLDocument(document, filename);
assert(result.status == pugi::status_ok);
pugi::xpath_node node;
node = document.select_single_node("/ss_technique");
std::string guid = node.node().attribute("guid").as_string();
IConfiguration::setAttribute("/ss_technique/guid", std::make_shared<CConfigurationAttribute>(guid));
GLenum guidEnum = g_stringToGLenum.find(guid)->second;
ui32 screen_width = node.node().attribute("screen_width").as_uint();
IConfiguration::setAttribute("/ss_technique/screen_width", std::make_shared<CConfigurationAttribute>(screen_width));
GLenum screen_widthEnum = g_stringToGLenum.find(screen_width)->second;
ui32 screen_height = node.node().attribute("screen_height").as_uint();
IConfiguration::setAttribute("/ss_technique/screen_height", std::make_shared<CConfigurationAttribute>(screen_height));
GLenum screen_heightEnum = g_stringToGLenum.find(screen_height)->second;
std::shared_ptr<CConfigurationMaterial> material = std::make_shared<CConfigurationMaterial>();
